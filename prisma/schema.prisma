generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  variants    ProductVariant[]
}

model ProductVariant {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int? // small, medium, large
  pizzaType Int? // slim, fat

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItem CartItem[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
  cartItems CartItem[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  totalAmount Int      @default(0)
  token       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  ingredients Ingredient[] // additional ingredients
}

model Order {
  id          Int         @id @default(autoincrement())
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  address     String
  email       String
  phone       String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
